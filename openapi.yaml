openapi: 3.0.3
info:
  title: Apple MusicKit API
  version: 1.0.0
  description: Full OpenAPI spec covering Apple Music catalog & user library control.
  contact:
    email: dennis@obrhoff.de
    url: https://obrhoff.de
externalDocs:
  description: GitHub Repository
  url: https://github.com/obrhoff/AppleMusicAPI

servers:
  - url: https://api.music.apple.com/v1

paths:
  /catalog/{storefront}/search:
    get:
      tags: [Search]
      summary: Search the Apple Music catalog
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Storefront"
        - name: term
          in: query
          required: true
          description: The search term to query the catalog.
          schema:
            type: string
        - name: types
          in: query
          required: true
          description: Types of resources to include in the search.
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CatalogSearchType"
        - name: with
          in: query
          required: false
          description: Additional data to include in the response.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [topResults]
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200": { $ref: "#/components/responses/SearchResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /catalog/us/search/hints:
    get:
      tags: [Search]
      summary: Provides search term hints for the catalog
      security:
        - BearerAuth: []
      parameters:
        - name: term
          in: query
          required: true
          description: The search term to query the catalog.
          schema:
            type: string
        - $ref: "#/components/parameters/Language"
      responses:
        "200": { $ref: "#/components/responses/SearchHintsResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /catalog/{storefront}/songs/{song_id}:
    get:
      tags: [Search]
      summary: Get a catalog song
      description: Fetch a specific song from the Apple Music catalog.
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Storefront"
        - name: song_id
          in: path
          required: true
          description: The identifier of the catalog song.
          schema:
            type: string
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200":
          description: Catalog song retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SongRelationship"
        "default": { $ref: "#/components/responses/Error" }

  /catalog/{storefront}/albums/{album_id}:
    get:
      tags: [Catalog]
      summary: Get a catalog album
      description: Fetch a specific album from the Apple Music catalog.
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Storefront"
        - name: album_id
          in: path
          required: true
          description: The identifier of the catalog album.
          schema:
            type: string
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200":
          description: Catalog album retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumRelationship"
        "default": { $ref: "#/components/responses/Error" }

  # Catalog Artists
  /catalog/{storefront}/artists/{artist_id}:
    get:
      tags: [Catalog]
      summary: Get a catalog artist
      description: Fetch a specific artist from the Apple Music catalog.
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Storefront"
        - name: artist_id
          in: path
          required: true
          description: The identifier of the catalog artist.
          schema:
            type: string
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200":
          description: Catalog artist retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistRelationship"
        "default": { $ref: "#/components/responses/Error" }

  /me/library/search:
    get:
      tags: [Library]
      summary: Search the user's library
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - name: term
          in: query
          required: true
          description: The search term to query the library.
          schema:
            type: string
        - name: types
          in: query
          required: true
          description: Types of resources to include in the search.
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/LibrarySearchType"
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200": { $ref: "#/components/responses/LibrarySearchResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /me/library/albums:
    get:
      tags: [Library]
      summary: Get user's library albums
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/LibraryAlbumsResponse" }
        "default": { $ref: "#/components/responses/Error" }

  # User Library Songs
  /me/library/songs:
    get:
      tags: [Library]
      summary: Get user's library songs
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/LibrarySongsResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /me/library/playlists:
    get:
      tags: [Library]
      summary: Get user's library playlists
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/LibraryPlaylistsResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /me/library/playlists/{playlist_id}/tracks:
    get:
      tags: [Library]
      summary: Get tracks from a library playlist
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistId"
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/PlaylistTracksResponse" }
        "default": { $ref: "#/components/responses/Error" }

  # Recommendations
  /me/recommendations:
    get:
      tags: [Recommendations]
      summary: Get user recommendations
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/RecommendationsResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /me/recommendations/{recommendation_id}:
    get:
      tags: [Recommendations]
      summary: Get a specific recommendation
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/RecommendationId"
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/RecommendationResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /me/recommendations/{recommendation_id}/contents:
    get:
      tags: [Recommendations]
      summary: Get contents of a specific recommendation
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      parameters:
        - $ref: "#/components/parameters/RecommendationId"
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/RecommendationContentsResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /catalog/{storefront}/playlists/{playlist_id}:
    get:
      tags: [Catalog]
      summary: Get a catalog playlist
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistId"
        - $ref: "#/components/parameters/Storefront"
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/CatalogPlaylistResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /catalog/{storefront}/playlists/{playlist_id}/tracks:
    get:
      tags: [Catalog]
      summary: Get tracks from a catalog playlist
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlaylistId"
        - $ref: "#/components/parameters/Storefront"
        - $ref: "#/components/parameters/Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Include"
        - $ref: "#/components/parameters/Extend"
      responses:
        "200": { $ref: "#/components/responses/CatalogPlaylistTracksResponse" }
        "default": { $ref: "#/components/responses/Error" }

  /ping:
    get:
      tags: [System]
      summary: Ping the Apple Music API
      description: Simple health check endpoint to validate token and API availability
      security:
        - BearerAuth: []
        - MusicUserAuth: []
      responses:
        "200": { $ref: "#/components/responses/Success" }
        "401": { $ref: "#/components/responses/Unauthorized" }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    MusicUserAuth:
      type: apiKey
      name: Music-User-Token
      in: header

  responses:
    Success:
      description: API is reachable and authorized

    Unauthorized:
      description: Unauthorized

    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    SearchResponse:
      description: Library playlists retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchResponse"

    SearchHintsResponse:
      description: Search hints retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchHintsResponse"

    LibrarySearchResponse:
      description: Library search results retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LibrarySearchResponse"

    LibraryAlbumsResponse:
      description: Library albums retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LibraryAlbumsResponse"

    LibrarySongsResponse:
      description: Library songs retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LibrarySongsResponse"

    LibraryPlaylistsResponse:
      description: Library playlists retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LibraryPlaylistsResponse"

    PlaylistTracksResponse:
      description: Tracks retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SongRelationship"

    RecommendationsResponse:
      description: Recommendations retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RecommendationResponse"

    RecommendationResponse:
      description: Recommendation retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RecommendationResponse"

    RecommendationContentsResponse:
      description: Recommendation contents retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RecommendationResponse"

    CatalogPlaylistResponse:
      description: Catalog playlist retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlaylistRelationship"

    CatalogPlaylistTracksResponse:
      description: Catalog playlist tracks retrieved
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatalogPlaylistTracksResponse"

  parameters:
    Language:
      name: l
      in: query
      description: The localization to use, specified by a language tag.
      required: false
      schema:
        type: string

    Limit:
      name: limit
      in: query
      description: The number of items to return (1-100).
      schema:
        type: integer
        default: 25
        minimum: 1
        maximum: 100

    Offset:
      name: offset
      in: query
      description: The index of the first item to return.
      schema:
        type: integer
        default: 0
        minimum: 0

    Include:
      name: include
      in: query
      description: Additional relationships to include in the fetch.
      schema:
        type: array
        items:
          type: string
          enum:
            - songs
            - stations
            - music-videos
            - artists
            - albums
            - curator
            - playlists
      style: form
      explode: false

    Extend:
      name: extend
      in: query
      description: A list of attribute extensions to apply to resources in the response.
      schema:
        type: array
        items:
          type: string
          enum:
            - artistURL
            - audioVariants
            - curator
            - radioShow
      style: form
      explode: false

    Storefront:
      name: storefront
      in: path
      required: true
      description: The storefront identifier.
      schema:
        type: string

    PlaylistId:
      name: playlist_id
      in: path
      required: true
      description: The identifier of the playlist.
      schema:
        type: string

    RecommendationId:
      name: recommendation_id
      in: path
      required: true
      description: The identifier of the recommendation.
      schema:
        type: string

  schemas:
    SearchHintsResponse:
      type: object
      properties:
        results:
          type: object
          properties:
            terms:
              type: array
              items:
                type: string
              description: A list of suggested search terms

    LibrarySearchResponse:
      type: object
      properties:
        results:
          type: object
          properties:
            library-artists:
              $ref: "#/components/schemas/ArtistRelationship"
            library-albums:
              $ref: "#/components/schemas/AlbumRelationship"
            library-playlists:
              $ref: "#/components/schemas/PlaylistRelationship"
            library-library-music-videos:
              $ref: "#/components/schemas/AlbumRelationship"
            library-library-song:
              $ref: "#/components/schemas/SongRelationship"

    LibraryAlbumsResponse:
      type: object
      required:
        - data
        - meta
      properties:
        next:
          type: string
          nullable: true
          description: URL to the next page of results.
        data:
          type: array
          items:
            $ref: "#/components/schemas/LibraryAlbum"
        meta:
          $ref: "#/components/schemas/Meta"

    LibrarySongsResponse:
      type: object
      required:
        - data
        - meta
      properties:
        next:
          type: string
          nullable: true
          description: URL to the next page of results.
        data:
          type: array
          items:
            $ref: "#/components/schemas/LibrarySong"
        meta:
          $ref: "#/components/schemas/Meta"

    LibraryPlaylistsResponse:
      type: object
      required:
        - data
        - meta
      properties:
        next:
          type: string
          nullable: true
          description: URL to the next page of results.
        data:
          type: array
          items:
            $ref: "#/components/schemas/LibraryPlaylist"
        meta:
          $ref: "#/components/schemas/Meta"

    CatalogPlaylistTracksResponse:
      type: object
      required:
        - data
      properties:
        next:
          type: string
          format: uri
        data:
          type: array
          items:
            $ref: "#/components/schemas/Song"

    ContentRating:
      type: string
      enum:
        - explicit
        - clean

    CatalogSearchType:
      type: string
      enum:
        - activities
        - albums
        - apple-curators
        - artists
        - curators
        - music-videos
        - playlists
        - record-labels
        - songs
        - stations

    LibrarySearchType:
      type: string
      enum:
        - library-albums
        - library-artists
        - library-music-videos
        - library-playlists
        - library-songs

    Artwork:
      type: object
      required:
        - url
      properties:
        width:
          type: integer
          example: 4320
        height:
          type: integer
          example: 1080
        url:
          type: string
          format: uri
          example: "https://is1-ssl.mzstatic.com/image/thumb/Features116/v4/.../{w}x{h}cc.jpg"
        bgColor:
          type: string
          example: "b04e1d"
        textColor1:
          type: string
          example: "000000"
        textColor2:
          type: string
          example: "12110e"
        textColor3:
          type: string
          example: "2a1a0e"
        textColor4:
          type: string
          example: "2a1b11"

    PlayParams:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        isLibrary:
          type: boolean
        globalId:
          type: string
          nullable: true
        versionHash:
          type: string
          nullable: true
        reporting:
          type: boolean
        catalogId:
          type: string
        reportingId:
          type: string

    Meta:
      type: object
      required:
        - total
      properties:
        total:
          type: integer
          description: Total number of items available.

    SearchResponse:
      type: object
      required:
        - results
      properties:
        results:
          type: object
          properties:
            topResults:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    oneOf:
                      - $ref: "#/components/schemas/Song"
                      - $ref: "#/components/schemas/Album"
                      - $ref: "#/components/schemas/Artist"
                      - $ref: "#/components/schemas/Playlist"
                      - $ref: "#/components/schemas/Curator"
            songs:
              type: array
              items:
                $ref: "#/components/schemas/SongRelationship"
            albums:
              type: array
              items:
                $ref: "#/components/schemas/AlbumRelationship"
            artists:
              type: array
              items:
                $ref: "#/components/schemas/ArtistRelationship"
            playlists:
              type: array
              items:
                $ref: "#/components/schemas/PlaylistRelationship"
            curators:
              type: array
              items:
                $ref: "#/components/schemas/CuratorRelationship"
        meta:
          type: object
          properties:
            results:
              type: object
              required:
                - order
                - rawOrder
              properties:
                order:
                  type: array
                  items:
                    type: string
                rawOrder:
                  type: array
                  items:
                    type: string

    LibrarySong:
      type: object
      required:
        - id
        - type
        - href
        - attributes
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/SongType"
        href:
          type: string
        attributes:
          $ref: "#/components/schemas/SongAttributes"

    LibraryAlbum:
      type: object
      required:
        - id
        - type
        - href
        - attributes
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/AlbumType"
        href:
          type: string
        attributes:
          $ref: "#/components/schemas/AlbumAttributes"

    LibraryPlaylist:
      type: object
      required:
        - id
        - type
        - href
        - attributes
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/PlaylistType"
        href:
          type: string
        attributes:
          type: object
          required:
            - lastModifiedDate
            - canEdit
            - name
            - isPublic
            - artwork
            - hasCatalog
            - dateAdded
            - playParams
          properties:
            lastModifiedDate:
              type: string
              format: date-time
            canEdit:
              type: boolean
            name:
              type: string
            isPublic:
              type: boolean
            description:
              type: object
              properties:
                standard:
                  type: string
            artwork:
              $ref: "#/components/schemas/Artwork"
            hasCatalog:
              type: boolean
            dateAdded:
              type: string
              format: date-time
            playParams:
              $ref: "#/components/schemas/PlayParams"

    SongType:
      type: string
      enum:
        - songs
        - library-songs

    Song:
      type: object
      required:
        - id
        - type
        - href
        - attributes
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/SongType"
        href:
          type: string
        attributes:
          $ref: "#/components/schemas/SongAttributes"
        relationships:
          type: object
          properties:
            albums:
              $ref: "#/components/schemas/AlbumRelationship"
            artists:
              $ref: "#/components/schemas/ArtistRelationship"

    SongAttributes:
      type: object
      required:
        - genreNames
        - trackNumber
        - durationInMillis
        - discNumber
        - hasLyrics
        - name
      properties:
        albumName:
          type: string
          example: "Sound of a Woman"
        genreNames:
          type: array
          items:
            type: string
          example: ["Electronic", "Musik"]
        trackNumber:
          type: integer
          example: 1
        releaseDate:
          type: string
          format: date
          example: "2014-01-01"
        durationInMillis:
          type: integer
          example: 251987
        ContentRating:
          $ref: "#/components/schemas/ContentRating"
        isrc:
          type: string
          example: "USUM71400121"
        artwork:
          $ref: "#/components/schemas/Artwork"
        composerName:
          type: string
          example: "Kiesa Rae Ellestad & Rami Afuni"
        url:
          type: string
          format: uri
        playParams:
          $ref: "#/components/schemas/PlayParams"
        discNumber:
          type: integer
          example: 1
        hasLyrics:
          type: boolean
          example: true
        isAppleDigitalMaster:
          type: boolean
          example: false
        name:
          type: string
          example: "Hideaway"
        previews:
          type: array
          items:
            type: object
            required:
              - url
            properties:
              url:
                type: string
                format: uri
                example: "https://audio-ssl.itunes.apple.com/itunes-assets/AudioPreview...plus.aac.p.m4a"
        artistName:
          type: string
          example: "Kiesza"

    SongRelationship:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Song"
        meta:
          $ref: "#/components/schemas/Meta"
        href:
          type: string

    AlbumType:
      type: string
      enum: [albums, library-albums]

    Album:
      type: object
      required:
        - id
        - href
        - type
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/AlbumType"
        href:
          type: string
        attributes:
          $ref: "#/components/schemas/AlbumAttributes"
        relationships:
          type: object
          properties:
            artists:
              $ref: "#/components/schemas/ArtistRelationship"

    AlbumAttributes:
      type: object
      required:
        - name
        - genreNames
        - trackCount
      properties:
        name:
          type: string
        artistName:
          type: string
        genreNames:
          type: array
          items:
            type: string
        releaseDate:
          type: string
          format: date
        dateAdded:
          type: string
          format: date-time
        trackCount:
          type: integer
        artwork:
          $ref: "#/components/schemas/Artwork"
        playParams:
          $ref: "#/components/schemas/PlayParams"

    AlbumRelationship:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Album"
        meta:
          $ref: "#/components/schemas/Meta"
        href:
          type: string

    ArtistType:
      type: string
      enum: [artists, library-artists]

    Artist:
      type: object
      required:
        - id
        - href
        - type
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ArtistType"
        href:
          type: string
        attributes:
          $ref: "#/components/schemas/ArtistAttributes"

    ArtistAttributes:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    ArtistRelationship:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Artist"
        meta:
          $ref: "#/components/schemas/Meta"
        href:
          type: string

    Curator:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - social-profiles
        attributes:
          $ref: "#/components/schemas/CuratorAttributes"

    CuratorAttributes:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        artwork:
          $ref: "#/components/schemas/Artwork"

    CuratorRelationship:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Curator"
        meta:
          $ref: "#/components/schemas/Meta"
        href:
          type: string

    PlaylistType:
      type: string
      enum:
        - playlists
        - library-playlists
        - personal-mix
        - editorial

    Playlist:
      type: object
      required:
        - id
        - type
        - href
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/PlaylistType"
        href:
          type: string
        attributes:
          $ref: "#/components/schemas/PlaylistAttributes"
        relationships:
          type: object
          properties:
            curator:
              $ref: "#/components/schemas/CuratorRelationship"
            tracks:
              $ref: "#/components/schemas/SongRelationship"

    PlaylistAttributes:
      type: object
      required:
        - curatorName
        - lastModifiedDate
        - name
        - isChart
        - playlistType
        - url
        - playParams
      properties:
        curatorName:
          type: string
          example: "Apple Music für Dennis"
        lastModifiedDate:
          type: string
          format: date-time
          example: "2025-05-15T07:41:02Z"
        name:
          type: string
          example: "Heavy Rotation-Mix"
        isChart:
          type: boolean
          example: false
        playlistType:
          type: string
          example: "personal-mix"
        description:
          type: object
          properties:
            standard:
              type: string
              example: "Die Songs, die du in Dauerschleife hörst. Alle in einer Playlist."
        artwork:
          $ref: "#/components/schemas/Artwork"
        url:
          type: string
          format: uri
        playParams:
          $ref: "#/components/schemas/PlayParams"

    PlaylistRelationship:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Playlist"
        meta:
          $ref: "#/components/schemas/Meta"
        href:
          type: string

    RecommendationRowType:
      type: string
      enum: [personal-recommendation, playlists]

    RecommendationType:
      type: string
      enum: [playlists, albums, stations]

    RecommendationResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RecommendationRow"

    RecommendationRow:
      type: object
      required:
        - id
        - type
        - href
        - attributes
        - relationships
      properties:
        id:
          type: string
          example: "6-27s5hU6azhJY"
        type:
          $ref: "#/components/schemas/RecommendationRowType"
        href:
          type: string
          format: uri
        attributes:
          $ref: "#/components/schemas/RecommendationRowAttributes"
        relationships:
          $ref: "#/components/schemas/RecommendationRowRelationship"

    Recommendation:
      type: object
      required:
        - id
        - type
        - href
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/RecommendationType"
        href:
          type: string
          format: uri
        attributes:
          $ref: "#/components/schemas/RecommendationAttributes"

    Description:
      type: object
      properties:
        standard:
          type: string
        short:
          type: string

    RecommendationAttributes:
      type: object
      properties:
        name:
          type: string
        artistName:
          type: string
        curatorName:
          type: string
        lastModifiedDate:
          type: string
          format: date-time
        releaseDate:
          type: string
          format: date
        description:
          $ref: "#/components/schemas/Description"
        genreNames:
          type: array
          items:
            type: string
        playlistType:
          $ref: "#/components/schemas/PlaylistType"
        artwork:
          $ref: "#/components/schemas/Artwork"
        playParams:
          $ref: "#/components/schemas/PlayParams"
        url:
          type: string
          format: uri
        isChart:
          type: boolean
        isCompilation:
          type: boolean
        isMasteredForItunes:
          type: boolean
        isSingle:
          type: boolean
        isComplete:
          type: boolean
        trackCount:
          type: integer
        recordLabel:
          type: string
        copyright:
          type: string

    RecommendationRowKind:
      type: string
      enum:
        - recently-played
        - music-recommendations

    RecommendationRowAttributes:
      type: object
      required:
        - isGroupRecommendation
        - resourceTypes
        - title
        - kind
        - nextUpdateDate
      properties:
        isGroupRecommendation:
          type: boolean
        resourceTypes:
          type: array
          items:
            type: string
            enum:
              - albums
              - playlists
              - stations
        title:
          type: object
          properties:
            stringForDisplay:
              type: string
            contentIds:
              type: array
              items:
                type: string
        kind:
          $ref: "#/components/schemas/RecommendationRowKind"
        nextUpdateDate:
          type: string
          format: date-time

    RecommendationRowRelationship:
      required:
        - contents
      properties:
        contents:
          type: object
          required:
            - href
            - data
          properties:
            href:
              type: string
              format: uri
            data:
              type: array
              items:
                $ref: "#/components/schemas/Recommendation"

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              status:
                type: string
              code:
                type: string
              detail:
                type: string
